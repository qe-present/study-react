const{v4:generateId}=require("uuid"),{NotFoundError}=require("../util/errors"),{readData,writeData}=require("./util");async function getAll(){const e=await readData();if(!e.events)throw new NotFoundError("Could not find any events.");return e.events}async function get(e){const t=await readData();if(!t.events||0===t.events.length)throw new NotFoundError("Could not find any events.");const n=t.events.find((t=>t.id===e));if(!n)throw new NotFoundError("Could not find event for id "+e);return n}async function add(e){const t=await readData();t.events.unshift({...e,id:generateId()}),await writeData(t)}async function replace(e,t){const n=await readData();if(!n.events||0===n.events.length)throw new NotFoundError("Could not find any events.");const r=n.events.findIndex((t=>t.id===e));if(r<0)throw new NotFoundError("Could not find event for id "+e);n.events[r]={...t,id:e},await writeData(n)}async function remove(e){const t=await readData(),n=t.events.filter((t=>t.id!==e));await writeData({...t,events:n})}exports.getAll=getAll,exports.get=get,exports.add=add,exports.replace=replace,exports.remove=remove;